/**
 给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。

设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:

你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
示例:
输入: [1,2,3,0,2]
输出: 3
解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]
 */

//dp[i][x]第i天进入(处于)x状态，手中所持有的最大金额（0.持股，1.不持股，2.冷冻期）

function getStockMaxValue(prices: number[]) {
    if (!prices || prices.length === 0) {
        return 0;
    }

    const length = prices.length;
    // dp[i][x]第i天进入(处于)x状态（0.持股，1.不持股，2.冷冻期）
    // dp[i][0]: 第i天进入持有股票的状态，所持有的最多现金 
    // dp[i][1]: 第i天进入非持有股票的状态，所持有的最多现金 
    // dp[i][2]: 第i天进入冷冻期的股票状态，所持有的最多现金 
    const dp = Array.from(Array(length), () => Array(3).fill(0));
    dp[0][0] = -prices[0];
    dp[0][1] = 0;
    dp[0][2] = 0;
    for (let i = 1; i < length; i++) {
        // dp[i][0]: 第i天进入持有股票的状态 1. 延续前一天持有股票的状态  2. 当天买入股票(包含冷冻期过后，可以买入股票)
        dp[i][0] = Math.max(dp[i - 1][0], dp[i -1][1]- prices[i]);
        // dp[i][1]: 第i天进入非持有股票的状态 1.延续前一天非持有股票的状态 2.股票已卖出，过了冷冻期，并且今天没买
        // 这里注意的是第i天进入非持有股票的状态，如果当天股票卖出的话，就进入了冷冻期状态了
        dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][2]);
        // dp[i][2]: 第i天进入冷冻期的股票状态，只有手中持有的股票，当天卖出
        dp[i][2] = dp[i - 1][0] + prices[i];
    }

    return Math.max(dp[length - 1][1], dp[length -1][2]);
}

export {
    getStockMaxValue
}